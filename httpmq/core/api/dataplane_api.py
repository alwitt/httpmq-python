"""
    httpmq

    HTTP/2 based message broker built around NATS JetStream  # noqa: E501

    The version of the OpenAPI document: v0.4.1-rc.4
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from httpmq.core.api_client import ApiClient, Endpoint as _Endpoint
from httpmq.core.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)
from httpmq.core.model.apis_api_rest_resp_data_message import ApisAPIRestRespDataMessage
from httpmq.core.model.dataplane_ack_seq_num import DataplaneAckSeqNum
from httpmq.core.model.goutils_rest_api_base_response import GoutilsRestAPIBaseResponse


class DataplaneApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.v1_data_alive_get_endpoint = _Endpoint(
            settings={
                "response_type": (GoutilsRestAPIBaseResponse,),
                "auth": [],
                "endpoint_path": "/v1/data/alive",
                "operation_id": "v1_data_alive_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {},
                "attribute_map": {},
                "location_map": {},
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.v1_data_ready_get_endpoint = _Endpoint(
            settings={
                "response_type": (GoutilsRestAPIBaseResponse,),
                "auth": [],
                "endpoint_path": "/v1/data/ready",
                "operation_id": "v1_data_ready_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {},
                "attribute_map": {},
                "location_map": {},
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.v1_data_stream_stream_name_consumer_consumer_name_ack_post_endpoint = _Endpoint(
            settings={
                "response_type": (GoutilsRestAPIBaseResponse,),
                "auth": [],
                "endpoint_path": "/v1/data/stream/{streamName}/consumer/{consumerName}/ack",
                "operation_id": "v1_data_stream_stream_name_consumer_consumer_name_ack_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "stream_name",
                    "consumer_name",
                    "sequence_num",
                    "httpmq_request_id",
                ],
                "required": [
                    "stream_name",
                    "consumer_name",
                    "sequence_num",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "stream_name": (str,),
                    "consumer_name": (str,),
                    "sequence_num": (DataplaneAckSeqNum,),
                    "httpmq_request_id": (str,),
                },
                "attribute_map": {
                    "stream_name": "streamName",
                    "consumer_name": "consumerName",
                    "httpmq_request_id": "Httpmq-Request-ID",
                },
                "location_map": {
                    "stream_name": "path",
                    "consumer_name": "path",
                    "sequence_num": "body",
                    "httpmq_request_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.v1_data_stream_stream_name_consumer_consumer_name_get_endpoint = _Endpoint(
            settings={
                "response_type": (ApisAPIRestRespDataMessage,),
                "auth": [],
                "endpoint_path": "/v1/data/stream/{streamName}/consumer/{consumerName}",
                "operation_id": "v1_data_stream_stream_name_consumer_consumer_name_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "stream_name",
                    "consumer_name",
                    "subject_name",
                    "httpmq_request_id",
                    "max_msg_inflight",
                    "delivery_group",
                ],
                "required": [
                    "stream_name",
                    "consumer_name",
                    "subject_name",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "stream_name": (str,),
                    "consumer_name": (str,),
                    "subject_name": (str,),
                    "httpmq_request_id": (str,),
                    "max_msg_inflight": (int,),
                    "delivery_group": (str,),
                },
                "attribute_map": {
                    "stream_name": "streamName",
                    "consumer_name": "consumerName",
                    "subject_name": "subject_name",
                    "httpmq_request_id": "Httpmq-Request-ID",
                    "max_msg_inflight": "max_msg_inflight",
                    "delivery_group": "delivery_group",
                },
                "location_map": {
                    "stream_name": "path",
                    "consumer_name": "path",
                    "subject_name": "query",
                    "httpmq_request_id": "header",
                    "max_msg_inflight": "query",
                    "delivery_group": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.v1_data_subject_subject_name_post_endpoint = _Endpoint(
            settings={
                "response_type": (GoutilsRestAPIBaseResponse,),
                "auth": [],
                "endpoint_path": "/v1/data/subject/{subjectName}",
                "operation_id": "v1_data_subject_subject_name_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "subject_name",
                    "message",
                    "httpmq_request_id",
                ],
                "required": [
                    "subject_name",
                    "message",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "subject_name": (str,),
                    "message": (str,),
                    "httpmq_request_id": (str,),
                },
                "attribute_map": {
                    "subject_name": "subjectName",
                    "httpmq_request_id": "Httpmq-Request-ID",
                },
                "location_map": {
                    "subject_name": "path",
                    "message": "body",
                    "httpmq_request_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["text/plain"],
            },
            api_client=api_client,
        )

    def v1_data_alive_get(self, **kwargs):
        """For dataplane REST API liveness check  # noqa: E501

        Will return success to indicate dataplane REST API module is live  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_data_alive_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GoutilsRestAPIBaseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.v1_data_alive_get_endpoint.call_with_http_info(**kwargs)

    def v1_data_ready_get(self, **kwargs):
        """For dataplane REST API readiness check  # noqa: E501

        Will return success if dataplane REST API module is ready for use  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_data_ready_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GoutilsRestAPIBaseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.v1_data_ready_get_endpoint.call_with_http_info(**kwargs)

    def v1_data_stream_stream_name_consumer_consumer_name_ack_post(
        self, stream_name, consumer_name, sequence_num, **kwargs
    ):
        """Handle ACK for message  # noqa: E501

        Process JetStream message ACK for a stream / consumer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_data_stream_stream_name_consumer_consumer_name_ack_post(stream_name, consumer_name, sequence_num, async_req=True)
        >>> result = thread.get()

        Args:
            stream_name (str): JetStream stream name
            consumer_name (str): JetStream consumer name
            sequence_num (DataplaneAckSeqNum): Message message sequence numbers

        Keyword Args:
            httpmq_request_id (str): User provided request ID to match against logs. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GoutilsRestAPIBaseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["stream_name"] = stream_name
        kwargs["consumer_name"] = consumer_name
        kwargs["sequence_num"] = sequence_num
        return self.v1_data_stream_stream_name_consumer_consumer_name_ack_post_endpoint.call_with_http_info(
            **kwargs
        )

    def v1_data_stream_stream_name_consumer_consumer_name_get(
        self, stream_name, consumer_name, subject_name, **kwargs
    ):
        """Establish a push subscribe session  # noqa: E501

        Establish a JetStream push subscribe session for a client. This is a long lived  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_data_stream_stream_name_consumer_consumer_name_get(stream_name, consumer_name, subject_name, async_req=True)
        >>> result = thread.get()

        Args:
            stream_name (str): JetStream stream name
            consumer_name (str): JetStream consumer name
            subject_name (str): JetStream subject to subscribe to

        Keyword Args:
            httpmq_request_id (str): User provided request ID to match against logs. [optional]
            max_msg_inflight (int): Max number of inflight messages (DEFAULT: 1). [optional]
            delivery_group (str): Needed if consumer uses delivery groups. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApisAPIRestRespDataMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["stream_name"] = stream_name
        kwargs["consumer_name"] = consumer_name
        kwargs["subject_name"] = subject_name
        return self.v1_data_stream_stream_name_consumer_consumer_name_get_endpoint.call_with_http_info(
            **kwargs
        )

    def v1_data_subject_subject_name_post(self, subject_name, message, **kwargs):
        """Publish a message  # noqa: E501

        Publish a Base64 encoded message to a JetStream subject  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_data_subject_subject_name_post(subject_name, message, async_req=True)
        >>> result = thread.get()

        Args:
            subject_name (str): JetStream subject to publish under
            message (str): Message to publish in Base64 encoding

        Keyword Args:
            httpmq_request_id (str): User provided request ID to match against logs. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GoutilsRestAPIBaseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["subject_name"] = subject_name
        kwargs["message"] = message
        return self.v1_data_subject_subject_name_post_endpoint.call_with_http_info(
            **kwargs
        )
