"""
    httpmq

    HTTP/2 based message broker built around NATS JetStream  # noqa: E501

    The version of the OpenAPI document: v0.4.1-rc.4
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from httpmq.core.api_client import ApiClient, Endpoint as _Endpoint
from httpmq.core.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)
from httpmq.core.model.apis_api_rest_req_stream_subjects import (
    ApisAPIRestReqStreamSubjects,
)
from httpmq.core.model.apis_api_rest_resp_all_jet_stream_consumers import (
    ApisAPIRestRespAllJetStreamConsumers,
)
from httpmq.core.model.apis_api_rest_resp_all_jet_streams import (
    ApisAPIRestRespAllJetStreams,
)
from httpmq.core.model.apis_api_rest_resp_one_jet_stream import (
    ApisAPIRestRespOneJetStream,
)
from httpmq.core.model.apis_api_rest_resp_one_jet_stream_consumer import (
    ApisAPIRestRespOneJetStreamConsumer,
)
from httpmq.core.model.goutils_rest_api_base_response import GoutilsRestAPIBaseResponse
from httpmq.core.model.management_js_stream_limits import ManagementJSStreamLimits
from httpmq.core.model.management_js_stream_param import ManagementJSStreamParam
from httpmq.core.model.management_jet_stream_consumer_param import (
    ManagementJetStreamConsumerParam,
)


class ManagementApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.v1_admin_alive_get_endpoint = _Endpoint(
            settings={
                "response_type": (GoutilsRestAPIBaseResponse,),
                "auth": [],
                "endpoint_path": "/v1/admin/alive",
                "operation_id": "v1_admin_alive_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {},
                "attribute_map": {},
                "location_map": {},
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.v1_admin_ready_get_endpoint = _Endpoint(
            settings={
                "response_type": (GoutilsRestAPIBaseResponse,),
                "auth": [],
                "endpoint_path": "/v1/admin/ready",
                "operation_id": "v1_admin_ready_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {},
                "attribute_map": {},
                "location_map": {},
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.v1_admin_stream_get_endpoint = _Endpoint(
            settings={
                "response_type": (ApisAPIRestRespAllJetStreams,),
                "auth": [],
                "endpoint_path": "/v1/admin/stream",
                "operation_id": "v1_admin_stream_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "httpmq_request_id",
                ],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "httpmq_request_id": (str,),
                },
                "attribute_map": {
                    "httpmq_request_id": "Httpmq-Request-ID",
                },
                "location_map": {
                    "httpmq_request_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.v1_admin_stream_post_endpoint = _Endpoint(
            settings={
                "response_type": (GoutilsRestAPIBaseResponse,),
                "auth": [],
                "endpoint_path": "/v1/admin/stream",
                "operation_id": "v1_admin_stream_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "setting",
                    "httpmq_request_id",
                ],
                "required": [
                    "setting",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "setting": (ManagementJSStreamParam,),
                    "httpmq_request_id": (str,),
                },
                "attribute_map": {
                    "httpmq_request_id": "Httpmq-Request-ID",
                },
                "location_map": {
                    "setting": "body",
                    "httpmq_request_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.v1_admin_stream_stream_name_consumer_consumer_name_delete_endpoint = _Endpoint(
            settings={
                "response_type": (GoutilsRestAPIBaseResponse,),
                "auth": [],
                "endpoint_path": "/v1/admin/stream/{streamName}/consumer/{consumerName}",
                "operation_id": "v1_admin_stream_stream_name_consumer_consumer_name_delete",
                "http_method": "DELETE",
                "servers": None,
            },
            params_map={
                "all": [
                    "stream_name",
                    "consumer_name",
                    "httpmq_request_id",
                ],
                "required": [
                    "stream_name",
                    "consumer_name",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "stream_name": (str,),
                    "consumer_name": (str,),
                    "httpmq_request_id": (str,),
                },
                "attribute_map": {
                    "stream_name": "streamName",
                    "consumer_name": "consumerName",
                    "httpmq_request_id": "Httpmq-Request-ID",
                },
                "location_map": {
                    "stream_name": "path",
                    "consumer_name": "path",
                    "httpmq_request_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.v1_admin_stream_stream_name_consumer_consumer_name_get_endpoint = _Endpoint(
            settings={
                "response_type": (ApisAPIRestRespOneJetStreamConsumer,),
                "auth": [],
                "endpoint_path": "/v1/admin/stream/{streamName}/consumer/{consumerName}",
                "operation_id": "v1_admin_stream_stream_name_consumer_consumer_name_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "stream_name",
                    "consumer_name",
                    "httpmq_request_id",
                ],
                "required": [
                    "stream_name",
                    "consumer_name",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "stream_name": (str,),
                    "consumer_name": (str,),
                    "httpmq_request_id": (str,),
                },
                "attribute_map": {
                    "stream_name": "streamName",
                    "consumer_name": "consumerName",
                    "httpmq_request_id": "Httpmq-Request-ID",
                },
                "location_map": {
                    "stream_name": "path",
                    "consumer_name": "path",
                    "httpmq_request_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.v1_admin_stream_stream_name_consumer_get_endpoint = _Endpoint(
            settings={
                "response_type": (ApisAPIRestRespAllJetStreamConsumers,),
                "auth": [],
                "endpoint_path": "/v1/admin/stream/{streamName}/consumer",
                "operation_id": "v1_admin_stream_stream_name_consumer_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "stream_name",
                    "httpmq_request_id",
                ],
                "required": [
                    "stream_name",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "stream_name": (str,),
                    "httpmq_request_id": (str,),
                },
                "attribute_map": {
                    "stream_name": "streamName",
                    "httpmq_request_id": "Httpmq-Request-ID",
                },
                "location_map": {
                    "stream_name": "path",
                    "httpmq_request_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.v1_admin_stream_stream_name_consumer_post_endpoint = _Endpoint(
            settings={
                "response_type": (GoutilsRestAPIBaseResponse,),
                "auth": [],
                "endpoint_path": "/v1/admin/stream/{streamName}/consumer",
                "operation_id": "v1_admin_stream_stream_name_consumer_post",
                "http_method": "POST",
                "servers": None,
            },
            params_map={
                "all": [
                    "stream_name",
                    "consumer_param",
                    "httpmq_request_id",
                ],
                "required": [
                    "stream_name",
                    "consumer_param",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "stream_name": (str,),
                    "consumer_param": (ManagementJetStreamConsumerParam,),
                    "httpmq_request_id": (str,),
                },
                "attribute_map": {
                    "stream_name": "streamName",
                    "httpmq_request_id": "Httpmq-Request-ID",
                },
                "location_map": {
                    "stream_name": "path",
                    "consumer_param": "body",
                    "httpmq_request_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.v1_admin_stream_stream_name_delete_endpoint = _Endpoint(
            settings={
                "response_type": (GoutilsRestAPIBaseResponse,),
                "auth": [],
                "endpoint_path": "/v1/admin/stream/{streamName}",
                "operation_id": "v1_admin_stream_stream_name_delete",
                "http_method": "DELETE",
                "servers": None,
            },
            params_map={
                "all": [
                    "stream_name",
                    "httpmq_request_id",
                ],
                "required": [
                    "stream_name",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "stream_name": (str,),
                    "httpmq_request_id": (str,),
                },
                "attribute_map": {
                    "stream_name": "streamName",
                    "httpmq_request_id": "Httpmq-Request-ID",
                },
                "location_map": {
                    "stream_name": "path",
                    "httpmq_request_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.v1_admin_stream_stream_name_get_endpoint = _Endpoint(
            settings={
                "response_type": (ApisAPIRestRespOneJetStream,),
                "auth": [],
                "endpoint_path": "/v1/admin/stream/{streamName}",
                "operation_id": "v1_admin_stream_stream_name_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "stream_name",
                    "httpmq_request_id",
                ],
                "required": [
                    "stream_name",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "stream_name": (str,),
                    "httpmq_request_id": (str,),
                },
                "attribute_map": {
                    "stream_name": "streamName",
                    "httpmq_request_id": "Httpmq-Request-ID",
                },
                "location_map": {
                    "stream_name": "path",
                    "httpmq_request_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.v1_admin_stream_stream_name_limit_put_endpoint = _Endpoint(
            settings={
                "response_type": (GoutilsRestAPIBaseResponse,),
                "auth": [],
                "endpoint_path": "/v1/admin/stream/{streamName}/limit",
                "operation_id": "v1_admin_stream_stream_name_limit_put",
                "http_method": "PUT",
                "servers": None,
            },
            params_map={
                "all": [
                    "stream_name",
                    "limits",
                    "httpmq_request_id",
                ],
                "required": [
                    "stream_name",
                    "limits",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "stream_name": (str,),
                    "limits": (ManagementJSStreamLimits,),
                    "httpmq_request_id": (str,),
                },
                "attribute_map": {
                    "stream_name": "streamName",
                    "httpmq_request_id": "Httpmq-Request-ID",
                },
                "location_map": {
                    "stream_name": "path",
                    "limits": "body",
                    "httpmq_request_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )
        self.v1_admin_stream_stream_name_subject_put_endpoint = _Endpoint(
            settings={
                "response_type": (GoutilsRestAPIBaseResponse,),
                "auth": [],
                "endpoint_path": "/v1/admin/stream/{streamName}/subject",
                "operation_id": "v1_admin_stream_stream_name_subject_put",
                "http_method": "PUT",
                "servers": None,
            },
            params_map={
                "all": [
                    "stream_name",
                    "subjects",
                    "httpmq_request_id",
                ],
                "required": [
                    "stream_name",
                    "subjects",
                ],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {
                    "stream_name": (str,),
                    "subjects": (ApisAPIRestReqStreamSubjects,),
                    "httpmq_request_id": (str,),
                },
                "attribute_map": {
                    "stream_name": "streamName",
                    "httpmq_request_id": "Httpmq-Request-ID",
                },
                "location_map": {
                    "stream_name": "path",
                    "subjects": "body",
                    "httpmq_request_id": "header",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": ["application/json"],
            },
            api_client=api_client,
        )

    def v1_admin_alive_get(self, **kwargs):
        """For management REST API liveness check  # noqa: E501

        Will return success to indicate management REST API module is live  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_admin_alive_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GoutilsRestAPIBaseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.v1_admin_alive_get_endpoint.call_with_http_info(**kwargs)

    def v1_admin_ready_get(self, **kwargs):
        """For management REST API readiness check  # noqa: E501

        Will return success if management REST API module is ready for use  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_admin_ready_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GoutilsRestAPIBaseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.v1_admin_ready_get_endpoint.call_with_http_info(**kwargs)

    def v1_admin_stream_get(self, **kwargs):
        """Query for info on all streams  # noqa: E501

        Query for the details of all streams  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_admin_stream_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            httpmq_request_id (str): User provided request ID to match against logs. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApisAPIRestRespAllJetStreams
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        return self.v1_admin_stream_get_endpoint.call_with_http_info(**kwargs)

    def v1_admin_stream_post(self, setting, **kwargs):
        """Define new stream  # noqa: E501

        Define new JetStream stream  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_admin_stream_post(setting, async_req=True)
        >>> result = thread.get()

        Args:
            setting (ManagementJSStreamParam): JetStream stream setting

        Keyword Args:
            httpmq_request_id (str): User provided request ID to match against logs. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GoutilsRestAPIBaseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["setting"] = setting
        return self.v1_admin_stream_post_endpoint.call_with_http_info(**kwargs)

    def v1_admin_stream_stream_name_consumer_consumer_name_delete(
        self, stream_name, consumer_name, **kwargs
    ):
        """Delete one consumer of a stream  # noqa: E501

        Delete one consumer of a stream  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_admin_stream_stream_name_consumer_consumer_name_delete(stream_name, consumer_name, async_req=True)
        >>> result = thread.get()

        Args:
            stream_name (str): JetStream stream name
            consumer_name (str): JetStream consumer name

        Keyword Args:
            httpmq_request_id (str): User provided request ID to match against logs. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GoutilsRestAPIBaseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["stream_name"] = stream_name
        kwargs["consumer_name"] = consumer_name
        return self.v1_admin_stream_stream_name_consumer_consumer_name_delete_endpoint.call_with_http_info(
            **kwargs
        )

    def v1_admin_stream_stream_name_consumer_consumer_name_get(
        self, stream_name, consumer_name, **kwargs
    ):
        """Get one consumer of a stream  # noqa: E501

        Query for the details of a consumer on a stream  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_admin_stream_stream_name_consumer_consumer_name_get(stream_name, consumer_name, async_req=True)
        >>> result = thread.get()

        Args:
            stream_name (str): JetStream stream name
            consumer_name (str): JetStream consumer name

        Keyword Args:
            httpmq_request_id (str): User provided request ID to match against logs. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApisAPIRestRespOneJetStreamConsumer
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["stream_name"] = stream_name
        kwargs["consumer_name"] = consumer_name
        return self.v1_admin_stream_stream_name_consumer_consumer_name_get_endpoint.call_with_http_info(
            **kwargs
        )

    def v1_admin_stream_stream_name_consumer_get(self, stream_name, **kwargs):
        """Get all consumers of a stream  # noqa: E501

        Query for the details of all consumers of a stream  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_admin_stream_stream_name_consumer_get(stream_name, async_req=True)
        >>> result = thread.get()

        Args:
            stream_name (str): JetStream stream name

        Keyword Args:
            httpmq_request_id (str): User provided request ID to match against logs. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApisAPIRestRespAllJetStreamConsumers
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["stream_name"] = stream_name
        return (
            self.v1_admin_stream_stream_name_consumer_get_endpoint.call_with_http_info(
                **kwargs
            )
        )

    def v1_admin_stream_stream_name_consumer_post(
        self, stream_name, consumer_param, **kwargs
    ):
        """Create a consumer on a stream  # noqa: E501

        Create a new consumer on a stream. The stream must already be defined.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_admin_stream_stream_name_consumer_post(stream_name, consumer_param, async_req=True)
        >>> result = thread.get()

        Args:
            stream_name (str): JetStream stream name
            consumer_param (ManagementJetStreamConsumerParam): Consumer parameters

        Keyword Args:
            httpmq_request_id (str): User provided request ID to match against logs. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GoutilsRestAPIBaseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["stream_name"] = stream_name
        kwargs["consumer_param"] = consumer_param
        return (
            self.v1_admin_stream_stream_name_consumer_post_endpoint.call_with_http_info(
                **kwargs
            )
        )

    def v1_admin_stream_stream_name_delete(self, stream_name, **kwargs):
        """Delete a stream  # noqa: E501

        Delete a stream  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_admin_stream_stream_name_delete(stream_name, async_req=True)
        >>> result = thread.get()

        Args:
            stream_name (str): JetStream stream name

        Keyword Args:
            httpmq_request_id (str): User provided request ID to match against logs. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GoutilsRestAPIBaseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["stream_name"] = stream_name
        return self.v1_admin_stream_stream_name_delete_endpoint.call_with_http_info(
            **kwargs
        )

    def v1_admin_stream_stream_name_get(self, stream_name, **kwargs):
        """Query for info on one stream  # noqa: E501

        Query for the details of one stream  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_admin_stream_stream_name_get(stream_name, async_req=True)
        >>> result = thread.get()

        Args:
            stream_name (str): JetStream stream name

        Keyword Args:
            httpmq_request_id (str): User provided request ID to match against logs. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ApisAPIRestRespOneJetStream
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["stream_name"] = stream_name
        return self.v1_admin_stream_stream_name_get_endpoint.call_with_http_info(
            **kwargs
        )

    def v1_admin_stream_stream_name_limit_put(self, stream_name, limits, **kwargs):
        """Change limits a stream  # noqa: E501

        Change the data retention limits of a stream  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_admin_stream_stream_name_limit_put(stream_name, limits, async_req=True)
        >>> result = thread.get()

        Args:
            stream_name (str): JetStream stream name
            limits (ManagementJSStreamLimits): New stream limits

        Keyword Args:
            httpmq_request_id (str): User provided request ID to match against logs. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GoutilsRestAPIBaseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["stream_name"] = stream_name
        kwargs["limits"] = limits
        return self.v1_admin_stream_stream_name_limit_put_endpoint.call_with_http_info(
            **kwargs
        )

    def v1_admin_stream_stream_name_subject_put(self, stream_name, subjects, **kwargs):
        """Change subjects of a stream  # noqa: E501

        Change the list of subjects of interest for a stream  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_admin_stream_stream_name_subject_put(stream_name, subjects, async_req=True)
        >>> result = thread.get()

        Args:
            stream_name (str): JetStream stream name
            subjects (ApisAPIRestReqStreamSubjects): List of new subjects

        Keyword Args:
            httpmq_request_id (str): User provided request ID to match against logs. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GoutilsRestAPIBaseResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["_request_auths"] = kwargs.get("_request_auths", None)
        kwargs["stream_name"] = stream_name
        kwargs["subjects"] = subjects
        return (
            self.v1_admin_stream_stream_name_subject_put_endpoint.call_with_http_info(
                **kwargs
            )
        )
